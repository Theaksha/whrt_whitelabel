// productCatalog.js
(function () {
	// This function builds the main POS page layout including category sidebar, search, and product grid.
	function createProductCatalog(wrapper) {
		// Create a page using Frappe's UI helper
		let page = frappe.ui.make_app_page({
			parent: wrapper,
			single_column: true
		});

		// Create category sidebar
		let category_sidebar = $('<div class="category-sidebar"></div>').appendTo(page.wrapper);
		category_sidebar.css({
			width: '178px',
			'background-color': '#f4f4f4',
			height: 'calc(100vh - 50px)',
			position: 'fixed',
			top: '50px',
			left: '0',
			padding: '10px 15px',
			'border-radius': '5px',
			'box-shadow': '2px 0px 5px rgba(0,0,0,0.1)',
			overflowY: 'auto',
			zIndex: '1000'
		});
		category_sidebar.append('<h3 class="sidebar-header">Categories</h3>');
		category_sidebar.find('.sidebar-header').css({
			'font-size': '18px',
			'font-weight': 'bold',
			color: '#ff6347',
			'margin-bottom': '15px',
			cursor: 'pointer'
		});

		// Create content area for products
		let content_area = $('<div class="content-area"></div>').appendTo(page.wrapper);
		content_area.css({
			padding: '20px',
			display: 'flex',
			'flex-direction': 'column',
			'background-color': 'black',
			'align-items': 'center',
			'margin-left': '200px',
			'margin-right': '240px',
			overflowX: 'hidden'
		});
		content_area.append('<h2>Whrt POS</h2>');
		content_area.append('<p>Select a category to view products</p>');

		// Create search bar
		let search_bar = $('<input type="text" placeholder="Search products..." class="search-bar">').css({
			width: '100%',
			padding: '10px',
			'margin-bottom': '20px',
			border: '1px solid #ddd',
			'border-radius': '5px'
		}).appendTo(content_area);

		search_bar.on('input', function () {
			let search_term = $(this).val();
			if (search_term.length > 2) {
				frappe.call({
					method: 'whrt_whitelabel.api.search_products',
					args: { search_term },
					callback: function (response) {
						if (response.message) {
							populateProductGrid(response.message);
						}
					}
				});
			}
		});

		// Create product grid
		let product_grid = $('<div class="product-grid"></div>').appendTo(content_area);
		product_grid.css({
			display: 'grid',
			'grid-template-columns': 'repeat(auto-fill, minmax(150px, 1fr))',
			gap: '10px',
			width: '100%',
			'margin-top': '20px'
		});

		// Pagination and currency formatting
		let currentPage = 1;
		const itemsPerPage = 24;
		let formatter = new Intl.NumberFormat('en-IN', {
			style: 'currency',
			currency: 'INR'
		});

		// Fetch categories (item groups)
		function fetchItemGroups() {
			frappe.call({
				method: 'whrt_whitelabel.api.get_item_groups',
				callback: function (response) {
					if (response.message) {
						populateCategorySidebar(response.message);
					} else {
						frappe.msgprint("Failed to fetch categories. Please try again.");
					}
				},
				error: function (err) {
					frappe.msgprint("An error occurred while fetching categories. Please check your network connection.");
				}
			});
		}

		function populateCategorySidebar(item_groups) {
			let menu = $('<ul></ul>').appendTo(category_sidebar);
			menu.css({ 'list-style-type': 'none', padding: 0, margin: 0 });
			item_groups.forEach(function (group) {
				let list_item = $('<li><a href="#" class="item-group">' + group.item_group_name + '</a></li>');
				menu.append(list_item);
				list_item.on('click', function (e) {
					e.preventDefault();
					currentPage = 1;
					load_products_by_category(group.item_group_name);
				});
			});
			menu.find('li').css({ 'margin-bottom': '10px', padding: '5px 0', 'font-size': '14px' });
		}

		function load_products_by_category(category_name) {
			product_grid.empty();
			frappe.call({
				method: 'whrt_whitelabel.api.get_products',
				args: { category_name, page: currentPage, limit: itemsPerPage },
				callback: function (response) {
					if (response.message) {
						const { products, total_count } = response.message;
						populateProductGrid(products);
						add_pagination_controls(total_count, category_name);
					} else {
						frappe.msgprint("Failed to fetch products. Please try again.");
					}
				},
				error: function (err) {
					frappe.msgprint("An error occurred while fetching products. Please check your network connection.");
				}
			});
		}

		function populateProductGrid(products) {
			products.forEach(function (product) {
				const product_item = createProductItem(product);
				product_grid.append(product_item);
			});
		}

		function createProductItem(product) {
			let product_item = $('<div class="product-item"></div>');
			product_item.css({
				border: '1px solid #ddd',
				'border-radius': '10px',
				padding: '15px',
				'box-shadow': '0px 4px 8px rgba(0, 0, 0, 0.1)',
				'background-color': '#fff',
				'text-align': 'center',
				cursor: 'pointer',
				transition: 'transform 0.3s ease',
				display: 'flex',
				'flex-direction': 'column',
				'justify-content': 'space-between',
				height: '350px'
			});
			// Hover scale effect
			product_item.hover(
				() => product_item.css('transform', 'scale(1.05)'),
				() => product_item.css('transform', 'scale(1)')
			);

			// Product image
			let product_image = $('<img src="' + product.image + '" alt="' + product.item_name + '" />').css({
				width: '100%',
				'max-height': '200px',
				'object-fit': 'cover',
				'border-radius': '8px',
				'margin-bottom': '15px'
			});
			product_item.append(product_image);

			// Product info (name and price)
			let product_info = $('<div class="product-info"></div>').css({
				display: 'flex',
				'flex-direction': 'column',
				'justify-content': 'space-between',
				'text-align': 'center'
			});
			let product_name = $('<div class="product-name"></div>').text(product.item_name).css({
				'font-weight': 'bold',
				'font-size': '16px',
				'margin-bottom': '10px'
			});
			let product_price = $('<div class="product-price"></div>').text(formatter.format(product.valuation_rate)).css({
				color: '#f60',
				'font-size': '14px'
			});
			product_info.append(product_name, product_price);
			product_item.append(product_info);

			// When clicked, add the product to the cart (assuming cartManager is available)
			product_item.on('click', function () {
				if (window.cartManager && window.cartManager.addToCart) {
					window.cartManager.addToCart(product);
				}
			});

			return product_item;
		}

		function add_pagination_controls(total_count, category_name) {
			const totalPages = Math.ceil(total_count / itemsPerPage);
			let pagination = $('<div class="pagination-controls"></div>').css({
				display: 'flex',
				'justify-content': 'center',
				'margin-top': '20px'
			});
			let prev_button = $('<button>Previous</button>')
				.css({ 'margin-right': '10px' })
				.prop('disabled', currentPage === 1);
			let next_button = $('<button>Next</button>')
				.prop('disabled', currentPage === totalPages);

			prev_button.on('click', function () {
				if (currentPage > 1) {
					currentPage--;
					load_products_by_category(category_name);
				}
			});
			next_button.on('click', function () {
				if (currentPage < totalPages) {
					currentPage++;
					load_products_by_category(category_name);
				}
			});
			pagination.append(prev_button, next_button);
			$('.pagination-controls').remove();
			content_area.append(pagination);
		}

		// Start by fetching the categories
		fetchItemGroups();

		// Optionally return some handles to the UI parts if needed
		return {
			loadProductsByCategory: load_products_by_category,
			getProductGrid: () => product_grid
		};
	}

	// Expose the module to the global namespace
	window.productCatalog = { create: createProductCatalog };
})();
