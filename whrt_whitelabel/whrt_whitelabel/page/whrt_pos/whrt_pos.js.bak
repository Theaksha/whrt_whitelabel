frappe.pages['whrt-pos'].on_page_load = function (wrapper) {
    $('.body-sidebar-container').hide();

    if (!frappe.session.user || frappe.session.user === 'Guest') {
        window.location.href = '/login?redirect-to=whrt-pos';
        return;
    }

    function show_pos_selection_dialog() {
        let saved_company = localStorage.getItem("selected_company");
        let saved_pos_profile = localStorage.getItem("selected_pos_profile");

        if (saved_company && saved_pos_profile) {
            frappe.msgprint(`Loaded saved session: ${saved_company} - ${saved_pos_profile}`);
            company_selected = saved_company;
            pos_profile_selected = saved_pos_profile;
            return;
        }

        let dialog = new frappe.ui.Dialog({
            title: "Select POS Session Details",
            fields: [
                { label: "Company", fieldname: "company", fieldtype: "Select", options: "", reqd: 1 },
                { label: "POS Profile", fieldname: "pos_profile", fieldtype: "Link", options: "POS Profile", reqd: 1 }
            ],
            primary_action_label: "Submit",
            primary_action(values) {
                if (!values.company || !values.pos_profile) {
                    frappe.msgprint("Please select both Company and POS Profile.");
                    return;
                }
                localStorage.setItem("selected_company", values.company);
                localStorage.setItem("selected_pos_profile", values.pos_profile);
                company_selected = values.company;
                pos_profile_selected = values.pos_profile;
                dialog.hide();
            }
        });

        frappe.call({
            method: "frappe.client.get_list",
            args: { doctype: "Company", fields: ["name"] },
            callback: function (response) {
                let companies = response.message.map(company => company.name).join("\n");
                dialog.set_df_property("company", "options", companies);
            }
        });

        dialog.show();
    }

    show_pos_selection_dialog();

    var page = frappe.ui.make_app_page({ parent: wrapper, single_column: true });

    var category_sidebar = $('<div class="category-sidebar"></div>').appendTo(page.wrapper);
    category_sidebar.css({ 'width': '178px', 'background-color': '#f4f4f4', 'height': 'calc(100vh - 50px)', 'position': 'fixed', 'top': '50px', 'left': '0', 'padding': '10px 15px', 'overflow-y': 'auto' });

    category_sidebar.append('<h3 class="sidebar-header">Categories</h3>');

    var content_area = $('<div class="content-area"></div>').appendTo(page.wrapper);
    content_area.css({ 'padding': '20px', 'display': 'flex', 'flex-direction': 'column', 'align-items': 'center', 'margin-left': '200px' });

    const product_grid = $('<div class="product-grid"></div>').appendTo(content_area);
    product_grid.css({ 'display': 'grid', 'grid-template-columns': 'repeat(auto-fill, minmax(150px, 1fr))', 'gap': '10px' });

    function fetchItemGroups() {
        if (!navigator.onLine) {
            let cachedGroups = localStorage.getItem("item_groups");
            if (cachedGroups) {
                populateCategorySidebar(JSON.parse(cachedGroups));
            }
            return;
        }

        frappe.call({
            method: 'whrt_whitelabel.api.get_item_groups',
            callback: function (response) {
                if (response.message) {
                    let item_groups = response.message;
                    localStorage.setItem("item_groups", JSON.stringify(item_groups));
                    populateCategorySidebar(item_groups);
                }
            }
        });
    }

    function populateCategorySidebar(item_groups) {
        var menu = $('<ul></ul>').appendTo(category_sidebar);
        item_groups.forEach(function (group) {
            var list_item = $('<li><a href="#" class="item-group">' + group.item_group_name + '</a></li>');
            menu.append(list_item);
            list_item.on('click', function (e) {
                e.preventDefault();
                loadProducts(group.item_group_name);
            });
        });
    }

    function loadProducts(category_name) {
        product_grid.empty();
        if (!navigator.onLine) {
            let cachedProducts = localStorage.getItem(`products_${category_name}`);
            if (cachedProducts) {
                populateProductGrid(JSON.parse(cachedProducts));
            }
            return;
        }

        frappe.call({
            method: 'whrt_whitelabel.api.get_products',
            args: { category_name: category_name },
            callback: function (response) {
                if (response.message) {
                    let products = response.message;
                    localStorage.setItem(`products_${category_name}`, JSON.stringify(products));
                    populateProductGrid(products);
                }
            }
        });
    }

    function populateProductGrid(products) {
        products.forEach(function (product) {
            const product_item = $('<div class="product-item"></div>').text(product.item_name);
            product_item.on('click', function () {
                addToCart(product);
            });
            product_grid.append(product_item);
        });
    }

    let cart = [];
    function addToCart(product) {
        const existingItem = cart.find(item => item.name === product.name);
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            product.quantity = 1;
            cart.push(product);
        }
        localStorage.setItem('cart', JSON.stringify(cart));
    }

    function processOfflineTransaction() {
        let offlineTransactions = JSON.parse(localStorage.getItem("offline_transactions")) || [];
        offlineTransactions.push({ cart, timestamp: Date.now() });
        localStorage.setItem("offline_transactions", JSON.stringify(offlineTransactions));
        frappe.msgprint("Transaction saved offline. It will sync when online.");
        cart = [];
    }

    function syncOnlineTransactions() {
        let offlineTransactions = JSON.parse(localStorage.getItem("offline_transactions")) || [];
        if (offlineTransactions.length === 0) return;

        offlineTransactions.forEach((transaction, index) => {
            frappe.call({
                method: 'whrt_whitelabel.api.create_invoice',
                args: { cart: JSON.stringify(transaction.cart) },
                callback: function (response) {
                    if (response.message) {
                        frappe.msgprint("Offline transaction synced.");
                        offlineTransactions.splice(index, 1);
                        localStorage.setItem("offline_transactions", JSON.stringify(offlineTransactions));
                    }
                }
            });
        });
    }

    window.addEventListener('online', syncOnlineTransactions);

    $('.checkout-btn').on('click', function () {
        if (navigator.onLine) {
            frappe.call({
                method: 'whrt_whitelabel.api.create_invoice',
                args: { cart: JSON.stringify(cart) },
                callback: function (response) {
                    if (response.message) {
                        frappe.msgprint("Invoice Created: " + response.message.invoice_id);
                        cart = [];
                        localStorage.removeItem('cart');
                    }
                }
            });
        } else {
            processOfflineTransaction();
        }
    });

    fetchItemGroups();
};
